version: 2
jobs:
  build:
    working_directory: /tmp/project/
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: build lambda
          command: |
            echo "Getting started with AWS Lambda deployment..."
            echo "Installing dependencies..."
            apt update -y && apt install -y zip > /dev/null
            echo "Zipping deployment package..."
            cd ./.build/
            git clone git@github.com:levelgoals/argyle-webhooks-authorizer.git
            zip lambda_artifact.zip lambda_function.py
            cp lambda_artifact.zip ../terraform-code/
            rm -rf ./.build/*
      - persist_to_workspace:
          root: .
          paths:
            - .
  plan-apply:    
    working_directory: /tmp/project/
    docker:
      - image: ubuntu:20.04
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform init & plan
          command: |
            echo "Starting terraform init and plan..."
            echo "Installing dependencies..."
            apt -qq update -y > /dev/null && apt -qq install -y curl unzip wget > /dev/null
            echo "Configuring terraform 1.1.9..."
            wget https://releases.hashicorp.com/terraform/1.1.9/terraform_1.1.9_linux_amd64.zip
            unzip -qq terraform_1.1.9_linux_amd64.zip && mv terraform /usr/local/bin/
            echo "Configuring AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            ./aws/install
            aws --version
            echo "Setting up AWS credentials..."        
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_PROD
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_PROD
            aws configure set default.region $AWS_DEFAULT_REGION
            rm -rf terraform_1.1.9_linux_amd64.zip terraform awscliv2.zip aws
            echo "Starting terraform init..."
            cd ./terraform-code/api-gateway
            terraform init -backend-config="access_key=$AWS_ACCESS_KEY_ID_PROD" -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY_PROD"
            echo "Starting terraform api-gateway plan..."
            terraform plan -out tfapply -var="api_gtw_restapi_name_dev=$TFVAR_api_gtw_restapi_name_dev"
            
      - persist_to_workspace:
          root: .
          paths:
            - .
  approve-apply:
    docker:
      - image: ubuntu:20.04
    steps:
      - attach_workspace:
          at: .
      - run:
          name: approve-apply
          command: |        
            echo "Waiting for approval..."
      - persist_to_workspace:
          root: .
          paths:
            - .
  apply:
    working_directory: /tmp/project/
    docker:
      - image: ubuntu:20.04
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform apply
          command: |            
            echo "Deploying terraform changes..."
            ls -la && pwd
            echo "Installing dependencies..."
            apt update -y 
            apt install -y curl unzip wget > /dev/null
            wget https://releases.hashicorp.com/terraform/1.1.8/terraform_1.1.8_linux_amd64.zip
            unzip -qq terraform_1.1.8_linux_amd64.zip && mv terraform /usr/local/bin/
            rm -rf terraform_1.1.8_linux_amd64.zip terraform
            echo "Getting artifact..."
            cd ./terraform-code/
            echo "Starting terraform apply..."
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
workflows:
  version: 2
  deploy-infrastructure:
    jobs:
      - build
      - plan-apply:
          requires:
            - build
      - approve-apply:
          type: approval
          requires:
            - plan-apply
      - apply:
          requires:
            - approve-apply