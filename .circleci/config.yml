version: 2
jobs:
  build-typescript:
    working_directory: /tmp/project/
    docker:
      - image: 416669478724.dkr.ecr.us-west-2.amazonaws.com/cicdtools:kotlin-latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - checkout
      - run:
          name: lambda-build
          command: |
            set -e
            echo "Getting started with Python build..."
            echo "Setting up environment dependencies..."
            TFVAR_environment='dev'
            echo "Installing Gradle..."
            wget -qq https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp
            unzip -qq -d /opt/gradle /tmp/gradle-${GRADLE_VERSION}-bin.zip
            echo "Setting up Gradle environment..."
            ln -s /opt/gradle/gradle-7.3.3 /opt/gradle/latest
            echo "export GRADLE_HOME=${GRADLE_HOME_VAR}" >> /etc/profile.d/gradle.sh
            echo "export PATH=${PATH}" >> /etc/profile.d/gradle.sh
            chmod +x /etc/profile.d/gradle.sh
            . /etc/profile.d/gradle.sh
            gradle -v
            echo "Setting up AWS credentials..."
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEV
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEV
            aws configure set default.region $AWS_DEFAULT_REGION
            echo "Starting Kotlin project build"
            cd ./.build
            ls -lah && pwd
            sam build --beta-features
      - persist_to_workspace:
          root: .
          paths:
            - .
  unit-test:
    working_directory: /tmp/project/
    docker:
      - image: 416669478724.dkr.ecr.us-west-2.amazonaws.com/cicdtools:kotlin-latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - attach_workspace:
          at: .
      - run:
          name: unit-test
          command: |
            set -e   
            echo "Getting started with Unit Test..."
            echo "Installing Gradle..."
            wget -qq https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp
            unzip -qq -d /opt/gradle /tmp/gradle-${GRADLE_VERSION}-bin.zip
            echo "Setting up Gradle environment..."
            ln -s /opt/gradle/gradle-7.3.3 /opt/gradle/latest
            echo "export GRADLE_HOME=${GRADLE_HOME_VAR}" >> /etc/profile.d/gradle.sh
            echo "export PATH=${PATH}" >> /etc/profile.d/gradle.sh
            chmod +x /etc/profile.d/gradle.sh
            . /etc/profile.d/gradle.sh
            gradle -v
            echo "Setting up AWS credentials..."
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEV
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEV
            aws configure set default.region $AWS_DEFAULT_REGION
            echo "Starting Unit Test..."
            cd ./.build/hello-world/
            npm install
            npm run test
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy-typescript-dev:  
    working_directory: /tmp/project/
    docker:
      - image: 416669478724.dkr.ecr.us-west-2.amazonaws.com/cicdtools:kotlin-latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - attach_workspace:
          at: .
      - run:
          name: lambda-deployment
          command: |
            set -e  
            echo "Running deployment to dev environment..."
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy-typescript-test:  
    working_directory: /tmp/project/
    docker:
      - image: 416669478724.dkr.ecr.us-west-2.amazonaws.com/cicdtools:kotlin-latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - attach_workspace:
          at: .
      - run:
          name: lambda-deployment
          command: |
            set -e  
            echo "Getting started with AWS Lambda deploy..."
            echo "Setting up environment dependencies..."
            TFVAR_environment='dev'
            echo "Installing Gradle..."
            wget -qq https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp
            unzip -qq -d /opt/gradle /tmp/gradle-${GRADLE_VERSION}-bin.zip
            echo "Setting up Gradle environment..."
            ln -s /opt/gradle/gradle-7.3.3 /opt/gradle/latest
            echo "export GRADLE_HOME=${GRADLE_HOME_VAR}" >> /etc/profile.d/gradle.sh
            echo "export PATH=${PATH}" >> /etc/profile.d/gradle.sh
            chmod +x /etc/profile.d/gradle.sh
            . /etc/profile.d/gradle.sh
            gradle -v
            echo "Setting up AWS credentials..."    
            AWS_PAGER=''
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEV
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEV
            aws configure set default.region $AWS_DEFAULT_REGION
            echo "Deploying Lambda function with AWS SAM..."            
            cd ./.build
            sam deploy --config-env $TFVAR_environment --stack-name ${TFVAR_environment}-typescript-app --no-fail-on-empty-changeset
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy-typescript-prod:  
    working_directory: /tmp/project/
    docker:
      - image: 416669478724.dkr.ecr.us-west-2.amazonaws.com/cicdtools:kotlin-latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - attach_workspace:
          at: .
      - run:
          name: lambda-deployment
          command: |
            set -e  
            echo "Getting started with AWS Lambda deploy..."
            echo "Setting up environment dependencies..."
            TFVAR_environment='qa'
            echo "Installing Gradle..."
            wget -qq https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp
            unzip -qq -d /opt/gradle /tmp/gradle-${GRADLE_VERSION}-bin.zip
            echo "Setting up Gradle environment..."
            ln -s /opt/gradle/gradle-7.3.3 /opt/gradle/latest
            echo "export GRADLE_HOME=${GRADLE_HOME_VAR}" >> /etc/profile.d/gradle.sh
            echo "export PATH=${PATH}" >> /etc/profile.d/gradle.sh
            chmod +x /etc/profile.d/gradle.sh
            . /etc/profile.d/gradle.sh
            gradle -v
            echo "Setting up AWS credentials..."    
            AWS_PAGER=''
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_TEST
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_TEST
            aws configure set default.region $AWS_DEFAULT_REGION
            echo "Deploying Lambda function with AWS SAM..."            
            cd ./.build
            sam deploy --config-env $TFVAR_environment --stack-name ${TFVAR_environment}-typescript-app --no-fail-on-empty-changeset
workflows:
  version: 2
  deploy-typescript:
    jobs:
      - build-typescript
      - unit-test:
          requires:
            - build-typescript
      - deploy-typescript-dev:
          requires:
            - unit-test
      - deploy-typescript-test:
          requires:
            - deploy-typescript-dev
      - approve-deploy-prod:
          type: approval
          requires:
            - deploy
      - deploy-typescript-prod:
          requires:
            - approve-deploy-prod