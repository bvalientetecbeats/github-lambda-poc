version: 2
jobs:
  build-container-python:
    working_directory: /tmp/project/
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build and push Docker image to ecr
          command: |
            set -e
            echo "Getting started with Docker image build..."
            echo "Installing dependencies..."
            AWS_PAGER=''
            sudo su - root << EOF
            apt-get -qq update -y && apt-get -qq install -y curl unzip
            echo "Configuring AWS CLI 2..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            ./aws/install
            aws --version
            EOF
            sudo su - root << EOF
            curl -sL https://deb.nodesource.com/setup_14.x | bash -
            apt-get install -y nodejs --force-yes
            EOF
            echo "Setting up AWS credentials..."
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEV
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEV
            aws configure set default.region $AWS_DEFAULT_REGION
            aws s3 ls
            echo "Starting Python build..."
            cd ./.build/
            npm ci
            npm run build
            echo "Build completed..."
            echo "Docker image building..."
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            docker build -t cicdtools:react-latest .
            docker tag cicdtools:react-latest $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:react-latest
            echo "Pushing docker image to ECR..."
            docker push $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:react-latest
            sleep 15
            echo "Deleting untagged docker image..."
            IMAGES_TO_DELETE=$( aws ecr list-images --region $AWS_DEFAULT_REGION --repository-name cicdtools --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
            aws ecr batch-delete-image --no-cli-pager --region $AWS_DEFAULT_REGION --repository-name cicdtools --image-ids "$IMAGES_TO_DELETE" || true
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy-ecs-dev:  
    working_directory: /tmp/project/
    docker:
      - image: $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:base-latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - checkout
      - attach_workspace:
          at: .          
      - run:
          name: ECS Deployment to Dev
          command: |
            echo "Setting up environment..."
            TFVAR_environment='dev'
            echo "Setting up AWS credentials..."    
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEV
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEV
            aws configure set default.region $AWS_DEFAULT_REGION
            echo "Starting terraform init..."
            cd ./terraform-code/$TFVAR_environment/ecs
            terraform init
            echo "Starting terraform plan..."
            terraform plan -out tfapply
            echo "Starting terraform apply..."
            terraform apply -auto-approve tfapply
workflows:
  version: 2
  deploy-python-containerized:
    jobs:
      - build-container-python
      - deploy-ecs-dev:
          requires:
            - build-container-python